#!/usr/bin/env bash

script_name=`basename $0`
echo "${script_name} <EXP_TAG> <ATT_BRIDGE_K> <MODEL_TYPE> <RECON> <LABEL_SMOOTHING> <GPU_NUM>"

EXP_TAG=${1:-2021_06_01}
PROJECT_TAG=${2:-2021_06_01}
ATT_BRIDGE_K=${3:-32}
MODEL_TYPE=${4:-mim}
RECON=${5:-true}
LABEL_SMOOTHING=${6:-0.0}
GPU_NUM=${7:-8}

ATT_BRIDGE_SIZE=2048
INSTANCE=dgx1v.32g.${GPU_NUM}.norm.beta
NGC_CONTAINER='nvcr.io/nvidia/pytorch:21.03-py3'

PROJECT=wmt20_es_en_tmim${PROJECT_TAG}
# EXP_NAME="en_es_wmt20-${MODEL_TYPE}_k${ATT_BRIDGE_K}_recon-${RECON}_ls${LABEL_SMOOTHING}"
EXP_NAME="${MODEL_TYPE}_k${ATT_BRIDGE_K}_recon-${RECON}_brsz${ATT_BRIDGE_SIZE}_ls${LABEL_SMOOTHING}${EXP_TAG}"
EXP_NAME_NGC="${PROJECT}-${EXP_NAME} ml-model.aayn-tmim"


WANDBLOGIN=1dadc548dae732414fcb97918f25942325315029

STEPS=600000
VOCAB_SIZE=32000
DATA_ID=73242

# command

read -d '' cmd <<EOF
nvidia-smi \
&& export DEBIAN_FRONTEND=noninteractive \
&& apt-get update \
&& apt-get install -y libsndfile1 ffmpeg \
&& pip install --upgrade wandb \
&& pip install Cython \
&& wandb login ${WANDBLOGIN} \
&& git clone https://github.com/michalivne/NeMo.git \
&& cd NeMo/ \
&& git checkout nmt-translationMIM \
&& ./reinstall.sh \
&& cd examples/nlp/machine_translation \
&& cp -R /data/parallel/sharded_tarfiles_60_even/ /raid/ \
&& cp -R /data/parallel/newstest2012-es-en.clean.tok.* /raid/ \
&& cp -R /data/parallel/newstest2013-es-en.clean.tok.* /raid/ \
&& python -- enc_dec_nmt-mim.py \
      --config-path=conf \
      --config-name=mim_base \
      exp_manager.name=${EXP_NAME} \
      'trainer.gpus=-1' \
      '~trainer.max_epochs' \
      +trainer.max_steps=${STEPS} \
      +trainer.val_check_interval=1000 \
      +exp_manager.exp_dir=/results/${PROJECT} \
      +exp_manager.create_wandb_logger=True \
      +exp_manager.wandb_logger_kwargs.name=${EXP_NAME} \
      +exp_manager.wandb_logger_kwargs.project=${PROJECT} \
      +exp_manager.resume_if_exists=True \
      +exp_manager.resume_ignore_no_checkpoint=True \
      +exp_manager.create_checkpoint_callback=True \
      +exp_manager.checkpoint_callback_params.monitor=val_sacreBLEU \
      +exp_manager.checkpoint_callback_params.mode=max \
      +exp_manager.checkpoint_callback_params.save_top_k=1 \
      model.beam_size=4 \
      model.max_generation_delta=30 \
      model.label_smoothing=${LABEL_SMOOTHING} \
      model.src_language=es \
      model.tgt_language=en \
      model.model_type=${MODEL_TYPE} \
      model.latent_size=1024 \
      model.ortho_loss_coef=0.0 \
      model.att_bridge_k=${ATT_BRIDGE_K} \
      model.att_bridge_size=${ATT_BRIDGE_SIZE} \
      model.recon_per_token=${RECON} \
      model.encoder.hidden_size=1024 \
      model.encoder.inner_size=4096 \
      model.encoder.num_attention_heads=16 \
      model.encoder.attn_layer_dropout=0.1 \
      model.encoder.ffn_dropout=0.1 \
      model.encoder.num_layers=6 \
      model.decoder.hidden_size=1024 \
      model.decoder.inner_size=4096 \
      model.decoder.num_attention_heads=16 \
      model.decoder.attn_layer_dropout=0.1 \
      model.decoder.ffn_dropout=0.1 \
      model.decoder.num_layers=6 \
      model.optim.lr=0.0004 \
      model.encoder_tokenizer.tokenizer_model=/raid/sharded_tarfiles_60_even/tokenizer.32000.BPE.model \
      model.decoder_tokenizer.tokenizer_model=/raid/sharded_tarfiles_60_even/tokenizer.32000.BPE.model \
      model.encoder_tokenizer.bpe_dropout=0.1 \
      model.decoder_tokenizer.bpe_dropout=0.1 \
      model.train_ds.tar_files=/raid/sharded_tarfiles_60_even/batches.tokens.16000._OP_1..302_CL_.tar \
      model.train_ds.metadata_file=/raid/sharded_tarfiles_60_even/metadata.json \
      model.train_ds.tokens_in_batch=16000 \
      model.train_ds.use_tarred_dataset=true \
      model.validation_ds.src_file_name=/raid/newstest2012-es-en.clean.tok.src \
      model.validation_ds.tgt_file_name=/raid/newstest2012-es-en.clean.tok.ref \
      model.test_ds.src_file_name=/raid/newstest2013-es-en.clean.tok.src \
      model.test_ds.tgt_file_name=/raid/newstest2013-es-en.clean.tok.ref \
      do_training=true
EOF

# launch script
set -e

ngc batch run \
  --name "${EXP_NAME_NGC}" \
  --preempt RUNONCE \
  --image "${NGC_CONTAINER}" \
  --ace nv-us-west-2 \
  --instance "${INSTANCE}" \
  --org nvidian \
  --team swdl-ai-apps \
  --result /results/ \
  --datasetid ${DATA_ID}:/data/ \
  --commandline "${cmd}"
